{"uid":"911537e0047da1e6","name":"Test for Client Connect with 1 VLAN","fullName":"e2e.basic.validation_of_operating_modes.bridge_mode.multi_psk.wpa2_security.test_multipsk_basic_wpa2.TestMultipskBridgeWPA2#test_client_wpa2_2g_vlan1","historyId":"7d0fd46912c00c0802a93aab891dbca7","time":{"start":1685630050182,"stop":1685630468767,"duration":418585},"description":"\n                    To verify a client operating on BRIDGE Mode Multipsk Test with wpa encryption 2.4 GHz Band is connecting or not.\n                    pytest -m \"ow_sanity_lf and vlan1 and wpa2 and multipsk\"\n        ","descriptionHtml":"<pre><code>                To verify a client operating on BRIDGE Mode Multipsk Test with wpa encryption 2.4 GHz Band is connecting or not.\n                pytest -m &quot;ow_sanity_lf and vlan1 and wpa2 and multipsk&quot;\n</code></pre>\n","status":"failed","statusMessage":"Failed: Station did not get an ip","statusTrace":"self = <tests.e2e.basic.validation_of_operating_modes.bridge_mode.multi_psk.wpa2_security.test_multipsk_basic_wpa2.TestMultipskBridgeWPA2 object at 0x7f78e3c71090>\nget_test_library = <lanforge_scripts.lf_libs.lf_tests.lf_tests object at 0x7f78e1559850>\nget_dut_logs_per_test_case = None, get_test_device_logs = None, num_stations = 1\nsetup_configuration = {'0006ae6df0db': {'radio_data': {'2G': {'bandwidth': 40, 'channel': 6, 'frequency': 2447}, '5G': {'bandwidth': None, '...}}, 'ssid_data': {0: {'band': '2G', 'bssid': '00:06:AE:6D:F0:BA', 'encryption': 'wpa2', 'password': 'OpenWifi', ...}}}}\ncheck_connectivity = None\n\n>   ???\n\n/home/tip/Desktop/TIP Automation/automation/wlan-testing/tests/e2e/basic/validation_of_operating_modes/bridge_mode/multi_psk/wpa2_security/test_multipsk_basic_wpa2.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/tip/.local/lib/python3.11/site-packages/lanforge_scripts/lf_libs/lf_tests.py:626: in multi_psk_test\n    sta_data[key] = self.client_connect(ssid=ssid, passkey=mpsk_data[key][\"passkey\"], security=encryption,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lanforge_scripts.lf_libs.lf_tests.lf_tests object at 0x7f78e1559850>, ssid = 'MDU-Wi-Fi-2g'\npasskey = 'OpenWifi1', security = 'wpa2', mode = 'BRIDGE', band = 'twog', vlan_id = [None], num_sta = 1\nscan_ssid = True, sta_mode = 0, pre_cleanup = False, station_data = ['ip', 'alias', 'mac', 'port type']\nallure_attach = True, identifier = '0006ae6df0db', allure_name = 'station data', client_type = None\ndut_data = {'0006ae6df0db': {'radio_data': {'2G': {'bandwidth': 40, 'channel': 6, 'frequency': 2447}, '5G': {'bandwidth': None, '...}}, 'ssid_data': {0: {'band': '2G', 'bssid': '00:06:AE:6D:F0:BA', 'encryption': 'wpa2', 'password': 'OpenWifi', ...}}}}\n\n    def client_connect(self, ssid=\"[BLANK]\", passkey=\"[BLANK]\", security=\"wpa2\", mode=\"BRIDGE\", band=\"twog\",\n                       vlan_id=[None], num_sta=None, scan_ssid=True, sta_mode=0, pre_cleanup=True,\n                       station_data=[\"4way time (us)\", \"channel\", \"cx time (us)\", \"dhcp (ms)\", \"ip\", \"signal\"],\n                       allure_attach=True, identifier=None, allure_name=\"station data\", client_type=None, dut_data={}):\n        # pre cleanup\n        if pre_cleanup:\n            self.pre_cleanup()\n        self.check_band_ap(band=band)\n        if identifier is None:\n            identifier = self.dut_data[0][\"identifier\"]\n            logging.info(\"Identifier: \" + str(identifier))\n        else:\n            all_identifier_list = []\n            for dut in self.dut_data:\n                all_identifier_list.append(dut[\"identifier\"])\n            print(all_identifier_list)\n            if identifier not in all_identifier_list:\n                logging.error(\"Identifier is missing\")\n                pytest.fail(\"Identifier is missing\")\n        if self.run_lf:\n            dut_data = self.run_lf_dut_data()\n    \n        data = self.setup_interfaces(ssid=ssid, passkey=passkey, encryption=security,\n                                     band=band, vlan_id=vlan_id, mode=mode, num_sta=num_sta, dut_data_=dut_data)\n    \n        logging.info(\"Setup interface data:\\n\" + json.dumps(str(data), indent=2))\n        allure.attach(name=\"Interface Info: \\n\", body=json.dumps(str(data), indent=2),\n                      attachment_type=allure.attachment_type.JSON)\n        if data == {}:\n            pytest.skip(\"Skipping This Test\")\n        client_connect_obj = []\n        station_data_all = {}\n        for radio in data[identifier][\"station_data\"]:\n            if band == \"twog\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"2G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"2G\"] is not None:\n                    sniffer_channel = dict(dut_data.get(identifier)[\"radio_data\"])[\"2G\"][\"channel\"]\n                    if data[identifier][\"sniff_radio_2g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel, test_name=f'{data[identifier][\"station_data\"][radio][0]}',\n                                           radio=data[identifier][\"sniff_radio_2g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            if band == \"fiveg\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"5G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"5G\"] is not None:\n                    sniffer_channel = dict(dut_data.get(identifier)[\"radio_data\"])[\"5G\"][\"channel\"]\n                    if data[identifier][\"sniff_radio_5g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel,\n                                           radio=data[identifier][\"sniff_radio_5g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            if band == \"sixg\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"6G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"6G\"] is not None:\n                    sniffer_channel = self.lf_sixg_lookup_validation(int(dict(dut_data.get(identifier)[\"radio_data\"])[\"6G\"][\"channel\"]))\n                    logging.info(\"LF sixg channel: \" + str(sniffer_channel))\n                    if data[identifier][\"sniff_radio_6g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel,\n                                           radio=data[identifier][\"sniff_radio_6g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            client_connect = CreateStation(_host=self.manager_ip, _port=self.manager_http_port,\n                                           _sta_list=data[identifier][\"station_data\"][radio],\n                                           _password=data[identifier][\"passkey\"],\n                                           _ssid=data[identifier][\"ssid\"],\n                                           _security=data[identifier][\"encryption\"])\n            client_connect.station_profile.sta_mode = sta_mode\n            client_connect.upstream_resource = data[identifier][\"upstream_resource\"]\n            client_connect.upstream_port = data[identifier][\"upstream\"]\n            client_connect.radio = radio\n            logging.info(\"scan ssid radio: \" + str(client_connect.radio))\n            if scan_ssid:\n                self.data_scan_ssid = self.scan_ssid(radio=client_connect.radio, ssid=ssid)\n            logging.info(\"ssid scan data: \" + str(self.data_scan_ssid))\n            client_connect_obj.append(client_connect)\n        pass_fail = []\n        for obj in client_connect_obj:\n            obj.build()\n            result = obj.wait_for_ip(station_list=obj.sta_list, timeout_sec=240)\n            pass_fail.append(result)\n            station_data_ = self.get_station_data(sta_name=obj.sta_list, rows=station_data,\n                                                  allure_attach=False)\n            station_data_all.update(station_data_)\n            sta_table_dict = {}\n            sta_table_dict[\"station name\"] = list(station_data_.keys())\n            for i in station_data:\n                temp_list = []\n                for j in obj.sta_list:\n                    temp_list.append(station_data_[j][i])\n                sta_table_dict[i] = temp_list\n            # pass fail\n            pass_fail_sta = []\n            for i in sta_table_dict[\"ip\"]:\n                if i == \"0.0.0.0\":\n                    pass_fail_sta.append(\"Fail\")\n                else:\n                    pass_fail_sta.append(\"Pass\")\n            sta_table_dict[\"Pass/Fail\"] = pass_fail_sta\n            if allure_attach:\n                self.attach_table_allure(data=sta_table_dict, allure_name=allure_name)\n    \n        # stop sniffer if active\n        logging.info(msg=str(\"Cleaning up sniffer interface If available on PORT Manager\"))\n        port_data = self.json_get(_req_url=\"/port?fields=alias,parent+dev,port+type,ip,mac\")['interfaces']\n        # for i in port_data:\n        #     for item in i:\n        #         if i[item]['port type'] == '802.1Q VLAN' and i[item]['ip'] == '0.0.0.0':\n        #             logging.info('VLAN do not have IP')\n        if self.start_sniffer:\n            self.stop_sniffer()\n    \n        logging.info(\"pass_fail result: \" + str(pass_fail))\n        if False in pass_fail:\n            logging.info(\"Station did not get an ip\")\n            for radio in data[identifier][\"station_data\"]:\n                self.get_supplicant_logs(radio=str(radio))\n>           pytest.fail(\"Station did not get an ip\")\nE           Failed: Station did not get an ip\n\n/home/tip/.local/lib/python3.11/site-packages/lanforge_scripts/lf_libs/lf_tests.py:829: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"selected_testbed","time":{"start":1685626223471,"stop":1685626223471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_target_object","time":{"start":1685626223471,"stop":1685626229954,"duration":6483},"status":"passed","steps":[],"attachments":[{"uid":"c98b46b411996a","name":"Sending Command:","source":"c98b46b411996a.attach","type":"text/plain","size":331},{"uid":"45b487c9e0ff8e22","name":"Command Response: ","source":"45b487c9e0ff8e22.attach","type":"text/plain","size":675},{"uid":"26cf34ecf20594f7","name":"Sending Command:","source":"26cf34ecf20594f7.attach","type":"text/plain","size":339},{"uid":"490524ec5f637cea","name":"Command Response: ","source":"490524ec5f637cea.attach","type":"text/plain","size":1410},{"uid":"520c747561cc8c3d","name":"Sending Command:","source":"520c747561cc8c3d.attach","type":"text/plain","size":343},{"uid":"fdb59db7d4a22137","name":"Command Response: ","source":"fdb59db7d4a22137.attach","type":"text/plain","size":679},{"uid":"ea50205a5f479b0b","name":"Sending Command:","source":"ea50205a5f479b0b.attach","type":"text/plain","size":342},{"uid":"a4f4fcf6fac104a6","name":"Command Response: ","source":"a4f4fcf6fac104a6.attach","type":"text/plain","size":797},{"uid":"4342fcf6412328c2","name":"Sending Command:","source":"4342fcf6412328c2.attach","type":"text/plain","size":343},{"uid":"14ad323ac2b8d9c1","name":"Command Response: ","source":"14ad323ac2b8d9c1.attach","type":"text/plain","size":679},{"uid":"7581adb6f42ac293","name":"Sending Command:","source":"7581adb6f42ac293.attach","type":"text/plain","size":344},{"uid":"3f667aff858ca733","name":"Command Response: ","source":"3f667aff858ca733.attach","type":"text/plain","size":681}],"parameters":[],"stepsCount":0,"attachmentsCount":12,"shouldDisplayMessage":false,"hasContent":true},{"name":"add_allure_environment_property","time":{"start":1685626223471,"stop":1685626223471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_testbed_details","time":{"start":1685626223471,"stop":1685626223471,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"397cc7e730bb21b","name":"Testbed Details","source":"397cc7e730bb21b.json","type":"application/json","size":2480}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"run_lf","time":{"start":1685626223471,"stop":1685626223471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"device","time":{"start":1685626709783,"stop":1685626709783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"is_test_library_perfecto_ios","time":{"start":1685626709783,"stop":1685626709783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_test_library","time":{"start":1685626709783,"stop":1685626733878,"duration":24095},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"is_test_library_perfecto_android","time":{"start":1685626709783,"stop":1685626709783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_device_configuration","time":{"start":1685626709783,"stop":1685626709783,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_security_flags","time":{"start":1685626733878,"stop":1685626733878,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"num_stations","time":{"start":1685626733878,"stop":1685626733878,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_markers","time":{"start":1685626733878,"stop":1685626733886,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"skip_lf","time":{"start":1685626733887,"stop":1685626733887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup_configuration","time":{"start":1685629931849,"stop":1685630049845,"duration":117996},"status":"passed","steps":[],"attachments":[{"uid":"a2403e28549bd8a0","name":"ubus call ucentral status","source":"a2403e28549bd8a0.json","type":"application/json","size":106},{"uid":"6dd1064140cb9d7e","name":"wifi_status_before_apply: ","source":"6dd1064140cb9d7e.attach","type":"text/plain","size":7726},{"uid":"6e24f916c20647bf","name":"AP Log Before config push: ","source":"6e24f916c20647bf.attach","type":"text/plain","size":75689},{"uid":"5a873ea782eed39","name":"Sending Command:","source":"5a873ea782eed39.attach","type":"text/plain","size":1864},{"uid":"7130128ea540adb6","name":"Command Response: ","source":"7130128ea540adb6.attach","type":"text/plain","size":2656},{"uid":"fd2cc9aa7edfb571","name":"ubus call ucentral status","source":"fd2cc9aa7edfb571.json","type":"application/json","size":106},{"uid":"f39d84a69cc0e8d","name":"cat /etc/ucentral/ucentral.cfg.1685629945","source":"f39d84a69cc0e8d.json","type":"application/json","size":2540},{"uid":"a5f222e272b11f08","name":"ubus call ucentral status","source":"a5f222e272b11f08.json","type":"application/json","size":106},{"uid":"203e1135325da0ed","name":"cat /etc/ucentral/ucentral.cfg.1685629945","source":"203e1135325da0ed.json","type":"application/json","size":2540},{"uid":"bccf3afc3dd0babd","name":"ubus call ucentral status","source":"bccf3afc3dd0babd.json","type":"application/json","size":106},{"uid":"da4a461e6a97dbae","name":"/etc/init.d/maverick status","source":"da4a461e6a97dbae.txt","type":"text/plain","size":60},{"uid":"e555ec1edc1ab525","name":"ifconfig up0v0","source":"e555ec1edc1ab525.txt","type":"text/plain","size":519},{"uid":"abcb36b2ccc04121","name":"ip neigh show dev up0v0 REACHABLE","source":"abcb36b2ccc04121.txt","type":"text/plain","size":103},{"uid":"ff4e81971d975437","name":"wifi_status_after_apply: ","source":"ff4e81971d975437.attach","type":"text/plain","size":2716},{"uid":"150e05b216a9a9b3","name":"Logs - 0006ae6df0db","source":"150e05b216a9a9b3.attach","type":"text/plain","size":18481},{"uid":"3fc4fcfabfc34f30","name":"iwinfo","source":"3fc4fcfabfc34f30.txt","type":"text/plain","size":564}],"parameters":[],"stepsCount":0,"attachmentsCount":16,"shouldDisplayMessage":false,"hasContent":true},{"name":"get_dut_logs_per_test_case","time":{"start":1685630049846,"stop":1685630050181,"duration":335},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_test_device_logs","time":{"start":1685630050181,"stop":1685630050181,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"check_connectivity","time":{"start":1685630050182,"stop":1685630050182,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n                    To verify a client operating on BRIDGE Mode Multipsk Test with wpa encryption 2.4 GHz Band is connecting or not.\n                    pytest -m \"ow_sanity_lf and vlan1 and wpa2 and multipsk\"\n        ","status":"failed","statusMessage":"Failed: Station did not get an ip","statusTrace":"self = <tests.e2e.basic.validation_of_operating_modes.bridge_mode.multi_psk.wpa2_security.test_multipsk_basic_wpa2.TestMultipskBridgeWPA2 object at 0x7f78e3c71090>\nget_test_library = <lanforge_scripts.lf_libs.lf_tests.lf_tests object at 0x7f78e1559850>\nget_dut_logs_per_test_case = None, get_test_device_logs = None, num_stations = 1\nsetup_configuration = {'0006ae6df0db': {'radio_data': {'2G': {'bandwidth': 40, 'channel': 6, 'frequency': 2447}, '5G': {'bandwidth': None, '...}}, 'ssid_data': {0: {'band': '2G', 'bssid': '00:06:AE:6D:F0:BA', 'encryption': 'wpa2', 'password': 'OpenWifi', ...}}}}\ncheck_connectivity = None\n\n>   ???\n\n/home/tip/Desktop/TIP Automation/automation/wlan-testing/tests/e2e/basic/validation_of_operating_modes/bridge_mode/multi_psk/wpa2_security/test_multipsk_basic_wpa2.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/tip/.local/lib/python3.11/site-packages/lanforge_scripts/lf_libs/lf_tests.py:626: in multi_psk_test\n    sta_data[key] = self.client_connect(ssid=ssid, passkey=mpsk_data[key][\"passkey\"], security=encryption,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lanforge_scripts.lf_libs.lf_tests.lf_tests object at 0x7f78e1559850>, ssid = 'MDU-Wi-Fi-2g'\npasskey = 'OpenWifi1', security = 'wpa2', mode = 'BRIDGE', band = 'twog', vlan_id = [None], num_sta = 1\nscan_ssid = True, sta_mode = 0, pre_cleanup = False, station_data = ['ip', 'alias', 'mac', 'port type']\nallure_attach = True, identifier = '0006ae6df0db', allure_name = 'station data', client_type = None\ndut_data = {'0006ae6df0db': {'radio_data': {'2G': {'bandwidth': 40, 'channel': 6, 'frequency': 2447}, '5G': {'bandwidth': None, '...}}, 'ssid_data': {0: {'band': '2G', 'bssid': '00:06:AE:6D:F0:BA', 'encryption': 'wpa2', 'password': 'OpenWifi', ...}}}}\n\n    def client_connect(self, ssid=\"[BLANK]\", passkey=\"[BLANK]\", security=\"wpa2\", mode=\"BRIDGE\", band=\"twog\",\n                       vlan_id=[None], num_sta=None, scan_ssid=True, sta_mode=0, pre_cleanup=True,\n                       station_data=[\"4way time (us)\", \"channel\", \"cx time (us)\", \"dhcp (ms)\", \"ip\", \"signal\"],\n                       allure_attach=True, identifier=None, allure_name=\"station data\", client_type=None, dut_data={}):\n        # pre cleanup\n        if pre_cleanup:\n            self.pre_cleanup()\n        self.check_band_ap(band=band)\n        if identifier is None:\n            identifier = self.dut_data[0][\"identifier\"]\n            logging.info(\"Identifier: \" + str(identifier))\n        else:\n            all_identifier_list = []\n            for dut in self.dut_data:\n                all_identifier_list.append(dut[\"identifier\"])\n            print(all_identifier_list)\n            if identifier not in all_identifier_list:\n                logging.error(\"Identifier is missing\")\n                pytest.fail(\"Identifier is missing\")\n        if self.run_lf:\n            dut_data = self.run_lf_dut_data()\n    \n        data = self.setup_interfaces(ssid=ssid, passkey=passkey, encryption=security,\n                                     band=band, vlan_id=vlan_id, mode=mode, num_sta=num_sta, dut_data_=dut_data)\n    \n        logging.info(\"Setup interface data:\\n\" + json.dumps(str(data), indent=2))\n        allure.attach(name=\"Interface Info: \\n\", body=json.dumps(str(data), indent=2),\n                      attachment_type=allure.attachment_type.JSON)\n        if data == {}:\n            pytest.skip(\"Skipping This Test\")\n        client_connect_obj = []\n        station_data_all = {}\n        for radio in data[identifier][\"station_data\"]:\n            if band == \"twog\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"2G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"2G\"] is not None:\n                    sniffer_channel = dict(dut_data.get(identifier)[\"radio_data\"])[\"2G\"][\"channel\"]\n                    if data[identifier][\"sniff_radio_2g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel, test_name=f'{data[identifier][\"station_data\"][radio][0]}',\n                                           radio=data[identifier][\"sniff_radio_2g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            if band == \"fiveg\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"5G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"5G\"] is not None:\n                    sniffer_channel = dict(dut_data.get(identifier)[\"radio_data\"])[\"5G\"][\"channel\"]\n                    if data[identifier][\"sniff_radio_5g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel,\n                                           radio=data[identifier][\"sniff_radio_5g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            if band == \"sixg\":\n                if dict(dut_data.get(identifier)[\"radio_data\"]).keys().__contains__(\"6G\") and \\\n                        dict(dut_data.get(identifier)[\"radio_data\"])[\"6G\"] is not None:\n                    sniffer_channel = self.lf_sixg_lookup_validation(int(dict(dut_data.get(identifier)[\"radio_data\"])[\"6G\"][\"channel\"]))\n                    logging.info(\"LF sixg channel: \" + str(sniffer_channel))\n                    if data[identifier][\"sniff_radio_6g\"] is not None and sniffer_channel is not None:\n                        self.start_sniffer(radio_channel=sniffer_channel,\n                                           radio=data[identifier][\"sniff_radio_6g\"],\n                                           duration=120)\n                    logging.info(\"started-sniffer\")\n            client_connect = CreateStation(_host=self.manager_ip, _port=self.manager_http_port,\n                                           _sta_list=data[identifier][\"station_data\"][radio],\n                                           _password=data[identifier][\"passkey\"],\n                                           _ssid=data[identifier][\"ssid\"],\n                                           _security=data[identifier][\"encryption\"])\n            client_connect.station_profile.sta_mode = sta_mode\n            client_connect.upstream_resource = data[identifier][\"upstream_resource\"]\n            client_connect.upstream_port = data[identifier][\"upstream\"]\n            client_connect.radio = radio\n            logging.info(\"scan ssid radio: \" + str(client_connect.radio))\n            if scan_ssid:\n                self.data_scan_ssid = self.scan_ssid(radio=client_connect.radio, ssid=ssid)\n            logging.info(\"ssid scan data: \" + str(self.data_scan_ssid))\n            client_connect_obj.append(client_connect)\n        pass_fail = []\n        for obj in client_connect_obj:\n            obj.build()\n            result = obj.wait_for_ip(station_list=obj.sta_list, timeout_sec=240)\n            pass_fail.append(result)\n            station_data_ = self.get_station_data(sta_name=obj.sta_list, rows=station_data,\n                                                  allure_attach=False)\n            station_data_all.update(station_data_)\n            sta_table_dict = {}\n            sta_table_dict[\"station name\"] = list(station_data_.keys())\n            for i in station_data:\n                temp_list = []\n                for j in obj.sta_list:\n                    temp_list.append(station_data_[j][i])\n                sta_table_dict[i] = temp_list\n            # pass fail\n            pass_fail_sta = []\n            for i in sta_table_dict[\"ip\"]:\n                if i == \"0.0.0.0\":\n                    pass_fail_sta.append(\"Fail\")\n                else:\n                    pass_fail_sta.append(\"Pass\")\n            sta_table_dict[\"Pass/Fail\"] = pass_fail_sta\n            if allure_attach:\n                self.attach_table_allure(data=sta_table_dict, allure_name=allure_name)\n    \n        # stop sniffer if active\n        logging.info(msg=str(\"Cleaning up sniffer interface If available on PORT Manager\"))\n        port_data = self.json_get(_req_url=\"/port?fields=alias,parent+dev,port+type,ip,mac\")['interfaces']\n        # for i in port_data:\n        #     for item in i:\n        #         if i[item]['port type'] == '802.1Q VLAN' and i[item]['ip'] == '0.0.0.0':\n        #             logging.info('VLAN do not have IP')\n        if self.start_sniffer:\n            self.stop_sniffer()\n    \n        logging.info(\"pass_fail result: \" + str(pass_fail))\n        if False in pass_fail:\n            logging.info(\"Station did not get an ip\")\n            for radio in data[identifier][\"station_data\"]:\n                self.get_supplicant_logs(radio=str(radio))\n>           pytest.fail(\"Station did not get an ip\")\nE           Failed: Station did not get an ip\n\n/home/tip/.local/lib/python3.11/site-packages/lanforge_scripts/lf_libs/lf_tests.py:829: Failed","steps":[],"attachments":[{"uid":"99ab974228218127","name":"VLAN Table","source":"99ab974228218127.attach","type":"text/plain","size":331},{"uid":"269f302ad996be26","name":"Interface Info: \n","source":"269f302ad996be26.json","type":"application/json","size":352},{"uid":"b7ae4f8766f01024","name":"scan_ssid_data","source":"b7ae4f8766f01024.attach","type":"text/plain","size":63049},{"uid":"b5084c93bb577164","name":"station data","source":"b5084c93bb577164.attach","type":"text/plain","size":1110},{"uid":"e01e770ad4680643","name":"pcap_file","source":"e01e770ad4680643.pcap","type":"application/vnd.tcpdump.pcap","size":6064180},{"uid":"46fd4fc0dd7eec86","name":"wpa_supplicant_log - wiphy0","source":"46fd4fc0dd7eec86.attach","type":"text/plain","size":1831197},{"uid":"b9e955c3972376cf","name":"Interface Info: \n","source":"b9e955c3972376cf.json","type":"application/json","size":353},{"uid":"5c1d5e3e65e6aa9c","name":"scan_ssid_data","source":"5c1d5e3e65e6aa9c.attach","type":"text/plain","size":60329},{"uid":"4200fc29119701d7","name":"station data","source":"4200fc29119701d7.attach","type":"text/plain","size":1033},{"uid":"543045cf2065d2fc","name":"pcap_file","source":"543045cf2065d2fc.pcap","type":"application/vnd.tcpdump.pcap","size":7777828},{"uid":"c81a280d94cd6bf2","name":"wpa_supplicant_log - wiphy0","source":"c81a280d94cd6bf2.attach","type":"text/plain","size":3121554},{"uid":"72f92d2ac574083e","name":"log","source":"72f92d2ac574083e.txt","type":"text/plain","size":112140}],"parameters":[],"stepsCount":0,"attachmentsCount":12,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"check_connectivity::collect_logs","time":{"start":1685630468904,"stop":1685630469274,"duration":370},"status":"passed","steps":[],"attachments":[{"uid":"ece7e2d0984c8014","name":"ubus call ucentral status","source":"ece7e2d0984c8014.json","type":"application/json","size":106},{"uid":"e3bae80b044e96ef","name":"Device : 0006ae6df0db is connected after Test","source":"e3bae80b044e96ef.attach","type":"application/octet-stream","size":0}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"get_test_device_logs::collect_logs_tg","time":{"start":1685630469274,"stop":1685630469711,"duration":437},"status":"passed","steps":[],"attachments":[{"uid":"f15398c6ade65e55","name":"lanforge_log_0","source":"f15398c6ade65e55.attach","type":"text/plain","size":4967144},{"uid":"e6731e5223a330f9","name":"lanforge_log_1","source":"e6731e5223a330f9.attach","type":"text/plain","size":3109971}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"get_dut_logs_per_test_case::collect_logs","time":{"start":1685630469712,"stop":1685630476971,"duration":7259},"status":"passed","steps":[],"attachments":[{"uid":"1daecbfbde02dd56","name":"Logs - 0006ae6df0db","source":"1daecbfbde02dd56.attach","type":"text/plain","size":6924}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"setup_configuration::0","time":{"start":1685630672552,"stop":1685630672552,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"skip_lf::0","time":{"start":1685638983018,"stop":1685638983018,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_target_object::1","time":{"start":1685638983021,"stop":1685638983022,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_target_object::teardown_target","time":{"start":1685638983022,"stop":1685638984048,"duration":1026},"status":"passed","steps":[],"attachments":[{"uid":"fb456006dba5e159","name":"Sending Command:","source":"fb456006dba5e159.attach","type":"text/plain","size":395}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"get_markers::0","time":{"start":1685638984050,"stop":1685638984050,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_security_flags::0","time":{"start":1685638984051,"stop":1685638984051,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"num_stations::0","time":{"start":1685638984051,"stop":1685638984051,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_test_library::1","time":{"start":1685638984052,"stop":1685638984052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_test_library::teardown_test","time":{"start":1685638984052,"stop":1685638984052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"run_lf::0","time":{"start":1685638984058,"stop":1685638984058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_device_configuration::0","time":{"start":1685638984059,"stop":1685638984059,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"device::0","time":{"start":1685638984062,"stop":1685638984062,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"is_test_library_perfecto_ios::0","time":{"start":1685638984063,"stop":1685638984063,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"is_test_library_perfecto_android::0","time":{"start":1685638984064,"stop":1685638984064,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_testbed_details::0","time":{"start":1685638984070,"stop":1685638984070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"selected_testbed::0","time":{"start":1685638984072,"stop":1685638984072,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"add_allure_environment_property::0","time":{"start":1685638984074,"stop":1685638984074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"suite","value":"BRIDGE Mode"},{"name":"subSuite","value":"WPA2 Security"},{"name":"parentSuite","value":"MultiPsk Test"},{"name":"feature","value":"MultiPsk Test"},{"name":"tag","value":"wpa2"},{"name":"tag","value":"ow_sanity_lf"},{"name":"tag","value":"vlan1"},{"name":"tag","value":"@pytest.mark.usefixtures('setup_configuration')"},{"name":"tag","value":"multi_psk_tests"},{"name":"tag","value":"ow_regression_lf"},{"name":"tag","value":"bridge"},{"name":"tag","value":"wpa2_personal"},{"name":"tag","value":"twog"},{"name":"host","value":"TIP"},{"name":"thread","value":"26370-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"e2e.basic.validation_of_operating_modes.bridge_mode.multi_psk.wpa2_security.test_multipsk_basic_wpa2"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"setup_configuration","value":"{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'MDU-Wi-Fi-2g', 'appliedRadios': ['2G'], 'security': 'psk2', 'security_key': 'OpenWifi', 'multi-psk': [{'key': 'OpenWifi1', 'vlan-id': 100}, {'key': 'OpenWifi2', 'vlan-id': 200}]}]}, 'rf': {}, 'radius': False}"}],"links":[{"name":"WIFI-3493","url":"https://telecominfraproject.atlassian.net/browse/WIFI-3493","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('setup_configuration')","ow_regression_lf","ow_sanity_lf","multi_psk_tests","wpa2_personal","bridge","wpa2","twog","vlan1"]},"source":"911537e0047da1e6.json","parameterValues":["{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'MDU-Wi-Fi-2g', 'appliedRadios': ['2G'], 'security': 'psk2', 'security_key': 'OpenWifi', 'multi-psk': [{'key': 'OpenWifi1', 'vlan-id': 100}, {'key': 'OpenWifi2', 'vlan-id': 200}]}]}, 'rf': {}, 'radius': False}"]}